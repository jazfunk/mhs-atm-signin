<?xml version="1.0"?>
<doc>
<assembly>
<name>
signIN2.0
</name>
</assembly>
<members>
<member name="M:signINver2.frmDGV_SignCheck.#ctor(System.Data.DataView,System.String)">
	<summary>
 Send a DataView and a String to populate
 </summary>
	<param name="dv">Any DataView</param>
	<param name="lt">List Type:  Jobs, Stations, Codes, Techs,etc.</param>
	<remarks></remarks>
</member><member name="M:signINver2.frmNewCust.IsValidEmail(System.String)">
	<summary>
 method for determining if the user provided a valid email address
 We use regular expressions in this check, as it is a more thorough
 way of checking the address provided
 </summary>
	<param name="email">email address to validate</param>
	<returns>true is valid, false if not valid</returns>
</member><member name="M:signINver2.frmGlobalTakeOff.getAtmTOF">
	<summary>
 Load all items from [Daily Production]
 </summary>
	<remarks>Filtered by job #</remarks>
</member><member name="M:signINver2.frmGlobalTakeOff.getAtmSiteList">
	<summary>
 Load all site's (station #'s) 
 </summary>
	<remarks>Grouped by [site]</remarks>
</member><member name="M:signINver2.frmGlobalTakeOff.UpdateLocationNotes(System.Int32,System.String)">
	<summary>
 Updates ATM Location ("Plan Issue Notes")
 </summary>
	<param name="siteID">"AutoNum" field from ATM Db</param>
	<param name="siteNotes">Notes to be added</param>
	<remarks></remarks>
</member><member name="M:signINver2.frmGlobalTakeOff.migrateExtrudedSign(System.String)">
	<summary>
	</summary>
	<param name="sT"></param>
	<remarks></remarks>
</member><member name="M:signINver2.Form1.IsValidEmail(System.String)">
	<summary>
 method for determining is the user provided a valid email address
 We use regular expressions in this check, as it is a more thorough
 way of checking the address provided
 </summary>
	<param name="email">email address to validate</param>
	<returns>true is valid, false if not valid</returns>
</member><member name="M:signINver2.frmStationStatus.GetRowsByFilter">
	<summary>
 Sample code:  DataTable.Select Method
 Modified to represent sIv2 Objects
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.UpdateSS">
	<summary>
 EndEdit for the BindingSource and Update the DataSource
 using the DataAdapter
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.FillSSDT(System.String)">
	<summary>
 Fill the main Station Status DataSet/DataTable
 </summary>
	<param name="jn"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.BindSSFields">
	<summary>
 Bind Station Status Fields
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.BindDTControls(System.Data.DataView)">
	<summary>
 Bind ssTBL controls
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.LoadEXT(System.Int32)">
	<summary>
 These methods utilitize the Reader Object and do not
 provide Methods to write back to the DataSource.
 </summary>
	<param name="siteID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.LoadTOFbyJob(System.String)">
	<summary>
 Get just ID and signType
 </summary>
	<param name="job">Job Number</param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.IterateDTtoFillDGV">
	<summary>
 Combines TakeOff Data from each Sign Type Table
 into one DataTable
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.MakeDataTable">
	<summary>
 Manually create DataTable
 Rethink this...
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.FillssTBL(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
	<summary>
 Inserts row into Manually created DataTable
 </summary>
	<param name="xID"></param>
	<param name="xSta"></param>
	<param name="xType"></param>
	<param name="xCode"></param>
	<param name="xDet"></param>
	<param name="xSize"></param>
	<param name="xSel"></param>
	<param name="xTOF"></param>
	<param name="xssID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.GetSignType(System.String)">
	<summary>
 Returns sign type and also sets
 TakeOff table name member
 </summary>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.GetTOFData(System.Int32,System.Int32)">
	<summary>
 Currently not used.  Will use when this form
 allows the user to select a specific type and
 work with only that type.
 </summary>
	<param name="sType"></param>
	<param name="sID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.LoadMHSJobs">
	<summary>
 Loads all (*) fields from Jobs Table
 Sets ComboBox.DataSource
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.OpenSheetingList(System.Object,System.EventArgs)">
	<summary>
 Open Sheeting Select Form, returns sheeting info (ID)
 to apply to station status table
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.GetSheetDescription(System.String,System.String)">
	<summary>
 This is seemingly stupid
 </summary>
	<param name="code"></param>
	<param name="BGorLegend"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.VisualSheetingColor(System.Object,System.EventArgs)">
	<summary>
 Display sheeting color
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.LoadSignTech">
	<summary>
 Load Sign Technicians
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.FillSlotNumbers(System.Int32)">
	<summary>
 Fill Rack slot #'s based on each racks capacity
 </summary>
	<param name="rN"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.FilterSSTable(System.Int32)">
	<summary>
 Select Specific record from combined DataTable
 currently using 'dv2' DataView Object to send without a filter
 while retaining the old code... which I'm still trying to 
 figure out what the hell I was doing in this form-11.1.12
 This method is not currently called anywhere - jk 9.5.15
 </summary>
	<param name="sID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmStationStatus.ShowPosition">
	<summary>
 Displays Current(n) record of Total(nth) records
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.clsUtilities.InitializeMySettings">
	<summary>
 Determine/Set Default My.Settings
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.clsUtilities.VisualSheetingColor(System.String)">
	<summary>
 Displays a visual representation of the current
 Color Selected based on 3M Sheeting Codes
 </summary>
	<param name="sheetingCode">3M Sheeting Code eg: 3930, 3937, 3990, etc.</param>
	<returns>A Color Object (Structure)</returns>
	<remarks></remarks>
</member><member name="M:signINver2.clsUtilities.NotNull``1(``0,``0)">
	<summary>
 This method was developed to solve the TypeCasting issues, using only Generics, when dealing
 with DBNull, Nothing, String.Empty, "".  
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Value">The Object to be checked and expected to be of T</param>
	<param name="DefaultValue">If Object fails TypeCasting, force the use of this value.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:signINver2.clsUtilities.ShowDecimalRound(System.Decimal,System.Int32)">
	<summary>
 Rounds the given decimal to the given digits
 </summary>
	<param name="Argument">Decimal to be rounded</param>
	<param name="Digits">Number of decimal places to round to</param>
	<returns>A Decimal rounded to nearest given digits</returns>
	<remarks></remarks>
</member><member name="M:signINver2.clsUtilities.ReadDataSyncToDataSet(System.String)">
	<summary>
 Reads an XML file and returns a DataSet base on the XML Schema
 </summary>
	<param name="DataSyncToClean">Path to XML file</param>
	<returns>DataSet representing data from XML file</returns>
	<remarks></remarks>
</member><member name="P:signINver2.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.atmConnStr01">
	<summary>
  Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0; Data Source=\\attermserv01\company data\Action\Action Traffic.mdb.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.connStr01">
	<summary>
  Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0; Data Source=\\attermserv01\company data\MHS Pre Production\signIN\db1.mdb.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.connStrMHS01">
	<summary>
  Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0; Data Source=\\attermserv01\company data\Michigan Highway\MHS Database.mdb.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.imgPath">
	<summary>
  Looks up a localized string similar to c:\sIv2\signImages\.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.inventoryConnStr01">
	<summary>
  Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0; Data Source=\\attermserv01\company data\MHS Pre Production\signIN\materialsInventory.mdb.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.jobsDirectory">
	<summary>
  Looks up a localized string similar to c:\sIv2\Jobs\.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.securedConnStr">
	<summary>
  Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0;Jet OLEDB:Database Password=j0hns0n; Data Source=\\attermserv01\company data\MHS Pre Production\signIN\secured.mdb;Persist Security Info=False.
</summary>
</member><member name="P:signINver2.My.Resources.Resources.serverImgPath">
	<summary>
  Looks up a localized string similar to \\attermserv01\company data\MHS Pre Production\signImages\.
</summary>
</member><member name="T:signINver2.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:signINver2.frmTOFtoStatus.GetSignType(System.String)">
	<summary>
 Returns sign type and also sets
 TakeOff table name member
 </summary>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:signINver2.frmTOFtoStatus.FillSSDT(System.String)">
	<summary>
 Load up currenty records from tblStationStatus
 I've created all the ADO.Net objectso to add/update/delete
 Only need to read to check for duplicates at this point
 7/13/16
 </summary>
	<param name="jn">MHS Job Number</param>
	<remarks></remarks>
</member><member name="F:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.DEFAULT_CUSTOM_FORMAT">
	<summary>
 The default value for the CustomFormat property.
 </summary>
</member><member name="F:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.DEFAULT_FORMAT">
	<summary>
 The default value for the Format property.
 </summary>
</member><member name="F:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel._customFormat">
	<summary>
 The custom format string used to format the date and/or time in the control.
 </summary>
</member><member name="F:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel._format">
	<summary>
 Determines whether dates and times are displayed using standard or custom formatting.
 </summary>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.CustomFormat">
	<summary>
 Gets or sets the custom date/time format string.
 </summary>
	<value>
 A string that represents the custom date/time format. The default is a null reference (<b>Nothing</b> in Visual Basic).
 </value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.Format">
	<summary>
 Gets or sets the format of the date and time displayed in the control.
 </summary>
	<value>
 One of the <see cref="T:System.Windows.Forms.DateTimePickerFormat"/> values. The default is <see cref="T:System.Windows.Forms.DateTimePickerFormat">Time</see>.
 </value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.ActiveLinkColor">
	<summary>
 Gets the color used to display an active link.
 </summary>
	<value></value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.IsLink">
	<summary>
 Gets a value indicating whether the ToolStripLabel is a hyperlink.
 </summary>
	<value>
 Always returns <b>false</b>.
 </value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.LinkBehavior">
	<summary>
 Gets a value that represents the behavior of a link
 </summary>
	<value>
 Always returns <see cref="F:System.Windows.Forms.LinkBehavior.SystemDefault"/>.
 </value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.LinkColor">
	<summary>
 Gets the color used to display an active link.
 </summary>
	<value>
 Always returns <see cref="F:System.Drawing.Color.Empty"/>.
 </value>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.Text">
	<summary>
 Overridden.  Gets the text that is to be displayed on the item.
 </summary>
</member><member name="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.VisitedLinkColor">
	<summary>
 Gets the color used when displaying a link that that has been previously visited.
 </summary>
	<value>
 Always returns <see cref="F:System.Drawing.Color.Empty"/>.
 </value>
</member><member name="M:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.#ctor">
	<summary>
 Initializes a new instance of the <b>ToolStripDateTimeStatusLabel</b> class.
 </summary>
	<remarks>
 This constructor sets the initial <see cref="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.Format"/> property value to <see cref="T:System.Windows.Forms.DateTimePickerFormat">Time</see>.
 </remarks>
</member><member name="E:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.FormatChanged">
	<summary>
 Occurs when the <see cref="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.Format"/> property value has changed or else the <b>Format</b> property value is
 <see cref="T:System.Windows.Forms.DateTimePickerFormat">Custom</see> and the <see cref="P:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.CustomFormat"/> property value has changed.
 </summary>
</member><member name="M:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.GetFormattedDateAndTime">
	<summary>
 Gets a string representing the current date and/or time formatted in
 accordance with the current Format and CustomFormat property values.
 </summary>
	<returns>
 A formatted string representing the current date and/or time.
 </returns>
</member><member name="M:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.OnFormatChanged(System.EventArgs)">
	<summary>
 Raises the <see cref="E:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.FormatChanged"/> event.
 </summary>
	<param name="e">
 An <seealso cref="T:System.EventArgs"/> that contains the event data.
 </param>
</member><member name="M:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.OnParentChanged(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
	<param name="oldParent">
 The original parent of the item.
 </param>
	<param name="newParent">
 The new parent of the item.
 </param>
</member><member name="M:signINver2.Wunnell.Windows.Forms.ToolStripDateTimeStatusLabel.UpdateText">
	<summary>
 Displays a formatted string representing the current date and/or time.
 </summary>
</member><member name="M:signINver2.frmEnterMHSdp.GetRowsByFilter">
	<summary>
 Sample code:  DataTable.Select Method
 Modified to represent sIv2 Objects
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.LoadEXT(System.Int32)">
	<summary>
 These methods utilitize the Reader Object and do not
 provide Methods to write back to the DataSource.
 </summary>
	<param name="siteID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.LoadTOFbyJob(System.String)">
	<summary>
 Get just ID and signType
 </summary>
	<param name="job">Job Number</param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.DisplayRowCount">
	<summary>
 Updates Row Count based on current filter
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.SetDGVds">
	<summary>
 Set DataSource of DataGridView2
 Note Used - jk 9.6.15
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.IterateDTtoFillDGV">
	<summary>
 Combines TakeOff Data from each Sign Type Table
 into one DataTable
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.MakeDataTable">
	<summary>
 Manually create DataTable
 Rethink this...
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.FillssTBL(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
	<summary>
 Inserts row into Manually created DataTable
 </summary>
	<param name="xID"></param>
	<param name="xSta"></param>
	<param name="xType"></param>
	<param name="xCode"></param>
	<param name="xDet"></param>
	<param name="xSize"></param>
	<param name="xSel"></param>
	<param name="xTOF"></param>
	<param name="xssID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.GetSignType(System.String)">
	<summary>
 Returns sign type and also sets
 TakeOff table name member
 </summary>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.GetTOFData(System.Int32,System.Int32)">
	<summary>
 Currently not used.  Will use when this form
 allows the user to select a specific type and
 work with only that type.
 </summary>
	<param name="sType"></param>
	<param name="sID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.LoadMHSJobs">
	<summary>
 Loads all (*) fields from Jobs Table
 Sets ComboBox.DataSource
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.UpdateSS">
	<summary>
 EndEdit for the BindingSource and Update the DataSource
 using the DataAdapter
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.FillSSDT(System.String)">
	<summary>
 Fill the main Station Status DataSet/DataTable
 </summary>
	<param name="jn"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.BindSSFields">
	<summary>
 Bind Station Status Fields
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.BindDTControls">
	<summary>
 Bind ssTbl Controls
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.LoadSignTech">
	<summary>
 Load Sign Technicians
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.ApplyUpdate(System.Int32)">
	<summary>
 Update StationStatus DataGridView
 </summary>
	<param name="i"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.SortLike(System.String)">
	<summary>
 To filter on Sign Code only.  Used to isolate sign codes.
 </summary>
	<param name="searchSTR"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.InitializeInstallDate">
	<summary>
 This Method initializes the ExtendedDateTimePicker's value to
 the one Day previous to Today's Date, unless it's Monday, then it
 selects the Previous Friday's Date.
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.DataGridView1_AND_2_DataSourceChanged(System.Object,System.EventArgs)">
	<summary>
 Update Row Counts
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.DataGridView2_SelectionChanged(System.Object,System.EventArgs)">
	<summary>
 Synchronizes the TakeOff table with the StationStatus table
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmEnterMHSdp.DataGridView1_SelectionChanged(System.Object,System.EventArgs)">
	<summary>
 Synchronizes the StationStatus table with the TakeOff table
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.LoadMHSJobs">
	<summary>
 Loads all (*) fields from Jobs Table
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.LoadEXT(System.Int32)">
	<summary>
 These methods utilitize the Reader Object and do not
 provide Methods to write back to the DataSource.
 </summary>
	<param name="siteID"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.LoadSignTech">
	<summary>
 Load Sign Technicians
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.BindDetails">
	<summary>
 Bind properties to the appropriate TextBoxes
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.LoadTxtFiles">
	<summary>
 Set default values in Text Files
 to avoid numerous and lengthy
 database calls
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.FillSSDT(System.String)">
	<summary>
 Fill the main Station Status DataSet/DataTable
 </summary>
	<param name="jn">MHS Job Number</param>
	<remarks></remarks>
</member><member name="M:signINver2.frmSignCheck.btnControlButtons_Click(System.Object,System.EventArgs)">
	<summary>
 One Method to handle each "Control" button
 Modify as needed, as new "Control" buttons are added
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:signINver2.frmCustomerListing.IsValidEmail(System.String)">
	<summary>
 method for determining if the user provided a valid email address
 We use regular expressions in this check, as it is a more thorough
 way of checking the address provided
 </summary>
	<param name="email">email address to validate</param>
	<returns>true is valid, false if not valid</returns>
</member><member name="M:signINver2.frmCertReceive.SumTypeValues(System.Int32,System.Data.DataTable)">
	<summary>
 Sums value of itemQty (tblFScertItems.itemQty) by given itemID (tblItems.ID)
 </summary>
	<param name="x">itemID</param>
	<param name="dt">joinBS - Datatable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:signINver2.frmCertReceive.LoopAndSum">
	<summary>
 Loop through flatsheet items and sum each type
 </summary>
	<remarks></remarks>
</member><member name="M:signINver2.frmCertReceive.SyncCertItems(System.Int32,System.Double,System.String)">
	<summary>
 Upon selecting an item from a specific certification received
 Select the corresponding item in the Items List DataGridView by
 iterating/looping each row and selecting the row matching the ID
 </summary>
	<param name="i">ID</param>
	<param name="q">itemQty</param>
	<param name="d">itemDetails</param>
	<remarks></remarks>
</member>
</members>
</doc>